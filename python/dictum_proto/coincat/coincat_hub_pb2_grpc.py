# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from dictum_proto.coincat import coincat_hub_pb2 as coincat_dot_coincat__hub__pb2
from dictum_proto.coincat import order_pb2 as coincat_dot_order__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coincat/coincat_hub_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoincatHubStub(object):
    """Репо - Coincat
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListExchanges = channel.unary_unary(
                '/coincat.CoincatHub/ListExchanges',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=coincat_dot_coincat__hub__pb2.ListExchangesResponse.FromString,
                _registered_method=True)
        self.ListCurrencies = channel.unary_unary(
                '/coincat.CoincatHub/ListCurrencies',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=coincat_dot_coincat__hub__pb2.ListCurrenciesResponse.FromString,
                _registered_method=True)
        self.GetOrderStatus = channel.unary_unary(
                '/coincat.CoincatHub/GetOrderStatus',
                request_serializer=coincat_dot_coincat__hub__pb2.GetOrderStatusRequest.SerializeToString,
                response_deserializer=coincat_dot_order__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.RescheduleOrder = channel.unary_unary(
                '/coincat.CoincatHub/RescheduleOrder',
                request_serializer=coincat_dot_coincat__hub__pb2.RescheduleOrderRequest.SerializeToString,
                response_deserializer=coincat_dot_order__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.CreateExchangeOrder = channel.unary_unary(
                '/coincat.CoincatHub/CreateExchangeOrder',
                request_serializer=coincat_dot_order__pb2.OrderRequest.SerializeToString,
                response_deserializer=coincat_dot_order__pb2.OrderResponse.FromString,
                _registered_method=True)


class CoincatHubServicer(object):
    """Репо - Coincat
    """

    def ListExchanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCurrencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RescheduleOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateExchangeOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoincatHubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListExchanges': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExchanges,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=coincat_dot_coincat__hub__pb2.ListExchangesResponse.SerializeToString,
            ),
            'ListCurrencies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCurrencies,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=coincat_dot_coincat__hub__pb2.ListCurrenciesResponse.SerializeToString,
            ),
            'GetOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatus,
                    request_deserializer=coincat_dot_coincat__hub__pb2.GetOrderStatusRequest.FromString,
                    response_serializer=coincat_dot_order__pb2.OrderResponse.SerializeToString,
            ),
            'RescheduleOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.RescheduleOrder,
                    request_deserializer=coincat_dot_coincat__hub__pb2.RescheduleOrderRequest.FromString,
                    response_serializer=coincat_dot_order__pb2.OrderResponse.SerializeToString,
            ),
            'CreateExchangeOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExchangeOrder,
                    request_deserializer=coincat_dot_order__pb2.OrderRequest.FromString,
                    response_serializer=coincat_dot_order__pb2.OrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coincat.CoincatHub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('coincat.CoincatHub', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoincatHub(object):
    """Репо - Coincat
    """

    @staticmethod
    def ListExchanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coincat.CoincatHub/ListExchanges',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            coincat_dot_coincat__hub__pb2.ListExchangesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCurrencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coincat.CoincatHub/ListCurrencies',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            coincat_dot_coincat__hub__pb2.ListCurrenciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coincat.CoincatHub/GetOrderStatus',
            coincat_dot_coincat__hub__pb2.GetOrderStatusRequest.SerializeToString,
            coincat_dot_order__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RescheduleOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coincat.CoincatHub/RescheduleOrder',
            coincat_dot_coincat__hub__pb2.RescheduleOrderRequest.SerializeToString,
            coincat_dot_order__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateExchangeOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coincat.CoincatHub/CreateExchangeOrder',
            coincat_dot_order__pb2.OrderRequest.SerializeToString,
            coincat_dot_order__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
